import numpy as np

np.random.seed(42)
features = np.random.random((1, 3))

# Number of records and input units
n_records, n_inputs = features.shape

print('Features:')
print(features)
print(f'features shape: {features.shape}')
print(f'records num: {n_records}')
print(f'inputs num: {n_inputs}')

# Number of hidden units
n_hidden = 2

# Weight matrix
weights_input_to_hidden = np.random.normal(loc=0, scale=n_inputs**-.5, 
                                           size=(n_inputs, n_hidden))
print(f'Weight Matrix:\n{weights_input_to_hidden}')

# hidden layer input h: summation(Wx)
# for j in range(n_hidden):
#     h = np.matmul(features[0], weights_input_to_hidden.T[j])
#     print(f'h{j} = {h}')
# or
hidden_input = np.dot(features[0], weights_input_to_hidden)
print(f'Hidden Input: {hidden_input}')

# Making a column vector
print('Making a column vector')
x = np.random.normal(size=(3))
print(f'row vector generated by np is x = {x}')
print(f'Trasposed x using x[:, None]:\n {x[:, None]}')

# Using T
x2 = np.array(x, ndmin=2)
print(f'make {x} as 2D => {x2}')
print(f'Trasposed x2 ({x2}) using x2.T\n {x2.T}')


